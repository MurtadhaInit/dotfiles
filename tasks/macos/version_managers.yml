# TODO: everything in this file need to be thoroughly tested
# TODO: also setup an automated test solution for the entire project. Maybe using GitHub actions and Tart?
- name: Setup Node
  tags: node
  block:
    # TODO: test if the environment variable is taking effect or it's the zsh rc files the second time (after dotfiles have been symlinked)
    - name: Install Volta
      tags: homebrew
      environment:
        VOLTA_HOME: "$HOME/.local/share/volta"
      community.general.homebrew:
        name: volta
        state: present

    - name: Install the latest LTS versions of Node and npm
      ansible.builtin.shell:
        cmd: volta install node && volta install npm

- name: Setup Go
  tags: go
  block:
    - name: Install gobrew
      environment:
        GOBREW_ROOT: "$HOME/.local/share/gobrew"
      ansible.builtin.shell:
        cmd: curl -sLk https://git.io/gobrew | sh

    - name: Install the latest version of Go
      environment:
        GOBREW_ROOT: "$HOME/.local/share/gobrew"
        PATH: "$GOBREW_ROOT/.gobrew/bin:{{ ansible_env.PATH }}"
      ansible.builtin.command:
        cmd: gobrew use latest

# NOTE: setting up Python this way is still messy. E.g. pipx will
# rely on the pyenv global version installed for all applications,
# and changing or upgrading that version will break the virtual
# environments used by pipx for those apps
- name: Setup Python
  tags: python
  block:
    - name: Install pyenv
      tags: homebrew
      environment:
        PYENV_ROOT: "$HOME/.local/share/pyenv"
      community.general.homebrew:
        name: pyenv
        state: present

    # NOTE: this will always install the latest Python version available
    # to pyenv, but it won't set it as the 'global' one, i.e. it won't
    # make it available in the shell.
    - name: Install the latest version of Python 3 using pyenv
      ansible.builtin.command:
        # NOTE: a faster interpreter, but longer build time
        # https://github.com/pyenv/pyenv/blob/master/plugins/python-build/README.md#building-for-maximum-performance
        # TODO: test with this instead
        # cmd: env PYTHON_CONFIGURE_OPTS='--enable-optimizations --with-lto' PYTHON_CFLAGS='-march=native -mtune=native' pyenv install --skip-existing 3
        cmd: pyenv install --skip-existing 3

      # NOTE: to make the playbook idempotent and avoid changing the
      # 'global' Python version everytime the previous step installs
      # a newer version, we skip this task if the current global version
      # doesn't match the latest known (i.e. available) Python version.
      # https://github.com/pyenv/pyenv#prefix-auto-resolution-to-the-latest-version
    - name: Set the 'global' Python 3 version using pyenv
      ansible.builtin.shell:
        cmd: '[ "$(pyenv latest 3)" = "$(pyenv latest --known 3)" ] && pyenv global 3'
        # This task will always set the global Python version the first
        # time the playbook is ran because the latest was just installed.

    - name: Install pipx
      tags: homebrew
      community.general.homebrew:
        name: pipx
        state: present

    - name: Install Python applications with pipx
      ansible.builtin.command:
        cmd: "pipx install {{ item }}"
      with_items: "{{ lookup('file', 'pipx_apps.txt') }}"

      # NOTE: this assumes Homebrew-installed zsh is the default shell
      # TODO: test with this to avoid that assumption?:
      # when: '[ "$(which $SHELL)" = "$(brew --prefix)/bin/zsh" ]'
    - name: Setup Poetry command completions
      environment:
        # for pipx tools/apps to be accessible (namely, poetry)
        PATH: "$HOME/.local/bin:{{ ansible_env.PATH }}"
      ansible.builtin.shell:
        cmd: poetry completions zsh > $(brew --prefix)/share/zsh/site-functions/_poetry
